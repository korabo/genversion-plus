/* global describe,it,afterEach,beforeEach */

const should = require('should')  // eslint-disable-line no-unused-vars
const path = require('path')
const fs = require('fs-extra')
const gv = require('../index')
const pjson = require('../package')

const P = '.tmp/v.js'

const removeTemp = function () {
  if (fs.existsSync(P)) {
    fs.unlinkSync(P)
    fs.rmdirSync(path.dirname(P))
  }
}

const readFileToArray = function () {
  const data = fs.readFileSync(P).toString()
  const lines = data.split(/\r?\n/);
  return lines
}

describe('genversion api', function () {
  beforeEach(function () {
    removeTemp()
  })

  afterEach(function () {
    removeTemp()
  })

  it('should detect missing version file', function (done) {
    gv.check('version.js', function (err, doesExist, isByGenversion) {
      should.equal(err, null)
      doesExist.should.equal(false)
      isByGenversion.should.equal(false)

      return done()
    })
  })

  it('should recognise es6 flag', function (done) {
    gv.generate(P, { genSyntax: 'es6' }, function (err, version) {
      should.equal(err, null)
      version.should.equal(pjson.version)

      const lines = readFileToArray()
      lines[0].should.equal('// generated by genversion-plus')
      lines[1].should.equal(`export const version = '${pjson.version}'`)

      gv.generate(P, function (err2) {
        should.equal(err2, null)

        const lines = readFileToArray()
        lines[0].should.equal('// generated by genversion-plus')
        lines[1].should.equal(`exports.version = '${pjson.version}'`)

        return done()
      })
    })
  })

  it('should recognise source flag', function (done) {
    gv.generate(P, { source: './test/fixture' }, function (err, v) {
      should.equal(err, null)
      v.should.equal('0.1.2')

      const lines = readFileToArray()
      lines[0].should.equal('// generated by genversion-plus')
      lines[1].should.equal(`exports.version = '0.1.2'`)

      return done()
    })
  })
})
